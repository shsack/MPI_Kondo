import copy
from .localOperators import *


class dot(localOperators):

    """constructs the MPO of the Anderson Impurity model"""

    def __init__(self, t, epsImp, epsBath, V, U, N, h=0):

        localOperators.__init__(self)

        self.N = N
        self.t = np.concatenate((np.array([V]), t))
        self.eps = np.concatenate((np.array([epsImp]), epsBath))

        self.U = [U] + [0]*(self.N-1)

        self.h = [h] + [0]*(self.N-1)

        self.on_site_magnetic = [np.diag([0, self.eps[n] - self.h[n], self.eps[n] + self.h[n],
                                          2 * self.eps[n] + self.U[n]]) for n in range(self.N)]

        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------

        # Hamiltonian MPO with magnetic field
        self.Hamiltonian = []

        # adding the left edge
        self.Hamiltonian.append(np.array([[self.on_site_magnetic[0], self.t[0] * self.create_up, self.t[0] * self.create_down, self.t[0].conj() * self.annih_up,
                   self.t[0] * self.annih_down, self.I]]))

        # calculating the bulk
        for n in range(1, self.N-1):
            self.Hamiltonian.append(np.array([[self.I, self.Z, self.Z, self.Z, self.Z, self.Z],
                                     [self.annih_up, self.Z, self.Z, self.Z, self.Z, self.Z],
                                     [self.annih_down, self.Z, self.Z, self.Z, self.Z, self.Z],
                                     [self.create_up, self.Z, self.Z, self.Z, self.Z, self.Z],
                                     [self.create_down, self.Z, self.Z, self.Z, self.Z, self.Z],
                [self.on_site_magnetic[n], self.t[n] * self.create_up, self.t[n] * self.create_down, self.t[n].conj() * self.annih_up,
                 self.t[n].conj() * self.annih_down, self.I]]))

        # adding the right edge
        self.Hamiltonian.append(np.array(
                [[self.I], [self.annih_up], [self.annih_down], [self.create_up], [self.create_down],
                 [self.on_site_magnetic[-1]]]))

        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------

        # unity MPO
        self.unity = [np.array([[self.I]])] * N

        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------

        # zero MPO
        self.zero = [np.array([[self.Z]])] * N

        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------


        # Impurity occupation number MPO
        self.dot_occupation = np.array([[[self.n_up + self.n_down]]] + [[[self.I]]] * (self.N - 1))

        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------

        # occupation dot up
        self.n_dot_up = np.array([[[self.n_up]]] + [[[self.I]]] * (self.N - 1))

        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------

        # occupation dot down
        self.n_dot_down = np.array([[[self.n_down]]] + [[[self.I]]] * (self.N - 1))

        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------

        # Impurity magnetization MPO

        self.impurityMagnetization = copy.deepcopy(self.unity)
        self.impurityMagnetization[0] = np.array([[self.n_up - self.n_down]])

        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------

        self.dot_annihilation_up = copy.deepcopy(self.unity)
        self.dot_annihilation_up[0] = np.array([[self.annih_up]])

        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------
        # --------------------------------------------------------------------------------------------------------------

        self.dot_creation_up = copy.deepcopy(self.unity)
        self.dot_creation_up[0] = np.array([[self.create_up]])










